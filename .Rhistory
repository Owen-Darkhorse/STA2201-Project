knitr::opts_chunk$set(echo = TRUE)
library(R.Matlab)
library(R.matlab)
filePath = "../derivatives/sub-001/eeg/sub-001_task-eyesclosed_eeg.set"
eegData <- readMat(filePath)
str(eegData)
procData <- eegData$data
icaWeights <- eegData$icaweights
icaWeightsInv <- eegData$icawinv
icaSphere <- eegdata$icasphere
icaSphere <- eegData$icasphere
summary(procData)
library(dplyr)
library(tidyverse)
procData %>% summarise(n)
procData %>% summarise(n=n())
procData %>% summarize(n=n())
summary(icaWeights)
?summary
mapply(icaWeights,function(x) range(x))
?mapply
mapply(icaWeights,FUN = function(x) range(x))
sapply(icaWeights,FUN = function(x) range(x))
range(procData)
range(icaWeights)
range(icaWeightsInv)
range(icaSphere)
View(procData)
cbind("Index" = 1:10, "y" = 2:11)
multiLinePlot(ica)
knitr::opts_chunk$set(echo = TRUE)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
p <- ggplot(data = mat)
for (j in 2:p+1) {
p <- p + geom_line(aes_string(x = "Index", y = paste0("V", j), color = j))
}
print(p)
}
multiLinePlot(icaSphere)
library(tidyverse)
library(tidyverse)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
p <- ggplot(data = mat)
for (j in 2:p+1) {
p <- p + geom_line(aes_string(x = "Index", y = paste0("V", j), color = j))
}
print(p)
}
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
p <- ggplot(data = mat)
for (j in 2:(p+1)) {
p <- p + geom_line(aes_string(x = "Index", y = paste0("V", j), color = j))
}
print(p)
}
multiLinePlot(icaSphere)
debug(multiLinePlot)
multiLinePlot(icaSphere)
print(p)
debug(multiLinePlot)
multiLinePlot(icaSphere)
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
p <- ggplot(data = mat)
for (j in 2:(p+1)) {
p + geom_line(aes_string(x = "Index",
y = paste0("V", j),
color = j))
}
print(p)
}
debug(multiLinePlot)
multiLinePlot(icaSphere)
qplot(mat)
qplot(procData)
ggplot(procData) + geom_line()
ggplot(icaWeights) + geom_line()
ggplot(data.frame(icaWeights)) + geom_line()
expression(paste0("V", j))
!!sym(paste("V", 3))
sym(paste("V", 3))
sym(paste0("V", 3))
library(tidyverse)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
p <- ggplot(data = mat)
for (j in 2:(p+1)) {
p <- p + geom_line(aes(x = Index,
y = sym(paste0("V", 3)),
color = j))
}
print(p)
}
debug(multiLinePlot)
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
p <- ggplot(data = mat)
for (j in 2:(p+1)) {
p <- p + geom_line(aes(x = Index,
y = sym(paste0("V", 3)),
color = j))
}
print(p)
}
multiLinePlot(icaSphere)
rlang::last_trace()
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
p <- ggplot2(data = mat)
for (j in 2:(p+1)) {
p <- p + geom_line(aes(x = Index,
y = sym(paste0("V", 3)),
color = j))
}
print(p)
}
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
p <- ggplot(data = mat)
for (j in 2:(p+1)) {
p <- p + geom_line(aes(x = Index,
y = sym(paste0("V", 3)),
color = j))
}
print(p)
}
multiLinePlot(icaSphere)
library(tidyverse)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
p <- ggplot(data = mat) + geom_line()
for (j in 2:(p+1)) {
p <- p + geom_line(aes(x = Index,
y = sym(paste0("V", 3)),
color = j))
}
print(p)
}
# debug(multiLinePlot)
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
g <- ggplot(data = mat)
for (j in 2:(p+1)) {
g <- g + geom_line(aes(x = Index,
y = sym(paste0("V", 3)),
color = j))
}
print(g)
}
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
g <- ggplot(data = mat)
for (j in 2:(p+1)) {
g <- g + geom_line(aes(x = Index,
y = sym(paste0("V", j)),
color = j))
}
print(g)
}
multiLinePlot(icaSphere)
View(icaSphere)
debug(multiLinePlot)
multiLinePlot(icaSphere)
print(g)
g
colnames(mat)
sym(paste0("V", j))
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
g <- ggplot(data = mat)
for (j in 2:(p+1)) {
g <- g + geom_line(aes(x = Index,
y = sym(paste0("V", j))))
}
print(g)
}
library(tidyverse)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
g <- ggplot(data = mat)
for (j in 2:(p+1)) {
g <- g + geom_line(aes(x = Index,
y = sym(paste0("V", j))))
}
print(g)
}
debug(multiLinePlot)
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
g <- ggplot(data = mat)
for (j in 2:(p+1)) {
g <- g + geom_line(aes_string(x = "Index",
y = paste0("V", j)))
}
g + ggtitle("Time Series of EEG")
print(g)
}
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
g <- ggplot(data = mat)
for (j in 2:(p+1)) {
g <- g + geom_line(aes_string(x = "Index",
y = paste0("V", j),
color = j))
}
g + ggtitle("Time Series of EEG")
print(g)
}
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
g <- ggplot(data = mat)
for (j in 2:(p+1)) {
g <- g + geom_line(aes_string(x = "Index",
y = mat[paste0("V", j)],
color = j))
}
g + ggtitle("Time Series of EEG")
print(g)
}
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
g <- ggplot(data = mat)
for (j in 2:(p+1)) {
g <- g + geom_line(aes(x = Index,
y = mat[paste0("V", j)],
color = j))
}
g + ggtitle("Time Series of EEG")
print(g)
}
multiLinePlot(icaSphere)
library(tidyverse)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
g <- ggplot(data = mat)
for (j in 2:(p+1)) {
g <- g + geom_line(aes_string(x = "Index",
y = paste0("V", j),
color = j))
}
g +
ggtitle("Time Series of EEG")+
scale_color_discrete()
print(g)
}
debug(multiLinePlot)
multiLinePlot(icaSphere)
multiLinePlot <- function(mat) {
n <- nrow(mat)
p <- ncol(mat)
mat <- cbind("Index" = 1:n, mat) %>% as.data.frame()
g <- ggplot(data = mat)
for (j in 2:(p+1)) {
g <- g + geom_line(aes_string(x = "Index",
y = paste0("V", j),
color = factor(j)))
}
g +
ggtitle("Time Series of EEG")+
scale_color_discrete()
print(g)
}
multiLinePlot(procData)
multiLinePlot(procData[1:100,])
multiLinePlot(procData[,1:100])
procdata <- t(procdata)
procdata <- t(procData)
multiLinePlot(procData[,1:100])
dim(procdtaa)
dim(procData)
multiLinePlot(procData[1:100, ])
procdata <- t(procData)
dim(procData)
procdata <- t(procData)
multiLinePlot(procData[1:100, ])
procData <- t(procData)
multiLinePlot(procData[1:100, ])
multiLinePlot(procData)
heatmap = function(A){
n = nrow(A)
p = ncol(A)
df = data.frame(value = c(A),  i = 1:n, j = rep(1:p, rep(n, p)))
ggplot(df, aes(j, i, fill = value)) +
geom_tile()+
scale_fill_viridis()+
#scale_fill_gradient(low="grey", high="black")+
scale_y_reverse()+
theme_void()
}
heatmap(icaWeights)
heatmap = function(A){
n = nrow(A)
p = ncol(A)
df = data.frame(value = c(A),  i = 1:n, j = rep(1:p, rep(n, p)))
ggplot(df, aes(j, i, fill = value)) +
geom_tile()+
#scale_fill_viridis()+
scale_fill_gradient(low="blue", high="red")+
scale_y_reverse()+
theme_void()
}
heatmap(icaWeights)
ggplot(df, aes(j, i, fill = value)) +
geom_tile()+
#scale_fill_viridis()+
scale_fill_gradient(low="wgite", high="red")+
scale_y_reverse()+
theme_void()
heatmap = function(A){
n = nrow(A)
p = ncol(A)
df = data.frame(value = c(A),  i = 1:n, j = rep(1:p, rep(n, p)))
ggplot(df, aes(j, i, fill = value)) +
geom_tile()+
#scale_fill_viridis()+
scale_fill_gradient(low="white", high="red")+
scale_y_reverse()+
theme_void()
}
heatmap(icaWeights)
heatmap(icaWeightsInv)
heatmap(icaSphere)
heatmap(procData)
library(igraph)
install.packages("igraph")
library(eegkit)
install.package("signal")
install.packages("signal")
library("sigma")
library("signal")
?signal
library(cluster)
?cluster
library(ggdendro)
install.packages("ggdendro")
install.packages("entropy")
